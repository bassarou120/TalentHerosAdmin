<?php

namespace App\Filament\Resources\CampagneResource\Pages;

use App\Filament\Resources\CampagneResource;
use App\Models\Campagne;
use App\Models\VisibiliteAbonne;
use App\Models\VisibilitePays;
use Filament\Actions;
use Filament\Resources\Pages\EditRecord;
use Illuminate\Database\Eloquent\Model;

class EditCampagne extends EditRecord
{
    protected static string $resource = CampagneResource::class;

    protected function getHeaderActions(): array
    {
        return [
            Actions\ViewAction::make(),
            Actions\DeleteAction::make(),
        ];
    }



    protected function mutateFormDataBeforeUpdate(array $data): array
    {

//        $data['image']='/'. $data['image'];

        return $data;
    }

    protected function handleRecordUpdate(Model $record, array $data): Model
    {


        // Check the visibility type and insert corresponding visibilities
        if ($data['visibilite'] == "ABONNES PAYS") {

            $lsPays = $data['pays'];
            unset($data['pays']);
            $campagne = $record->update($data);  // Ensure the campaign is created and saved
            // Now you have a valid campagne ID

            $campagneId = $record->id;
            VisibilitePays::where('campagne_id',$campagneId)->delete();
            foreach ($lsPays as $paysId) {
                VisibilitePays::create([
                    'campagne_id' => $campagneId,  // Use the valid campagne ID
                    'pay_id' => $paysId,
                ]);
            }
        }elseif($data['visibilite'] == "GROUPE D'ABONNES") {
            $lsAbonne = $data['abonnes'];
            unset($data['abonnes']);

            $campagne = $record->update($data);  // Ensure the campaign is created and saved



            // Now you have a valid campagne ID
            $campagneId = $record->id;

            VisibiliteAbonne::where('campagne_id',$campagneId)->delete();
            foreach ($lsAbonne as $abonneId) {
                VisibiliteAbonne::create([
                    'campagne_id' => $campagneId,  // Use the valid campagne ID
                    'user_id' => $abonneId,
                ]);
            }
        }else{
            $campagne =$record->update($data);
        }

        return  $record;
//        return parent::handleRecordUpdate($record, $data); // TODO: Change the autogenerated stub
    }

}
